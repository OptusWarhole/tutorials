@charset "UTF-8";
/**
    *
    *           _____ _______ _____  _____ _____ 
    *          |_   _|__   __/ ____|/ ____/ ____|
    *            | |    | | | |    | (___| (___  
    *            | |    | | | |     \___ \\___ \ 
    *           _| |_   | | | |____ ____) |___) |
    *          |_____|  |_|  \_____|_____/_____/ 
    *
    *
    *
    * SETTINGS
    *
    * Fonts................Import every local fonts
    * Colors...............inuitcssâ€™ core and setup settings.
    * Global...............Project-wide variables.
    *
    *
    * MIXINS
    *
    * Font-size............A mixin which guarantees baseline-friendly line-heights.
    * Clearfix.............Micro clearfix mixin.
    * Hidden...............Mixin for hiding elements.
    *
    *
    * ELEMENTS
    *
    * Blank................Blank.
    *
    *
    * OBJECTS
    *
    * Blank................Blank.
    *
    *
    * COMPONENTS
    *
    * Buttons..............Buttons' default appearance.
    * Headings.............Headings' default appearance.
    * Images...............Images' default appearance.
    * Inputs...............Inputs' default appearance.
    * Links................Links' default appearance.
    * Lists................Lists' default appearance.
    * Paragraphs...........Paragraphs' default appearance.
    *
    *
    * HACKS
    *
    * Hide.................Helper classes to hide content
    * Clearfix.............Bind our clearfix onto a utility class.
    *
    * Print................Reset-like styles taken from the HTML5 Boilerplate.
    *
    */
/*
 * Naming variable
 *
 * Start by naming the variable "$color" and add the name (camelCase) that you find here
 * http://www.color-blindness.com/color-name-hue/
 *
 * Examples :
 * - "darken( $base-color, 10% )"
 * - "lighten( $base-color, 10% )"
 *
 * - rgba( $color-alizarin-crimson, .7 )
 *
 *
 */
/*==========================================================================
Black
========================================================================== */
/*==========================================================================
Grey
========================================================================== */
/*==========================================================================
White
========================================================================== */
/*==========================================================================
Red
========================================================================== */
/*==========================================================================
Blue
========================================================================== */
/*==========================================================================
Green
========================================================================== */
a {
  color: rgba(255, 255, 255, 0.5);
  text-decoration: none;
  transition: all 0.8s ease 0s;
}

a:hover {
  color: white;
}

html {
  font-family: Roboto;
  font-size: 14px;
  color: #545454;
}

html body {
  background-color: #222222;
}

.field {
  position: relative;
  height: 62px;
  padding: 16px 0 8px 0;
}

.field:before {
  content: "";
  position: absolute;
  bottom: 6px;
  left: 0;
  height: 2px;
  width: 100%;
  background-color: #FFFFFF;
}

.field:after {
  content: "";
  position: absolute;
  bottom: 6px;
  left: 0;
  height: 2px;
  width: 100%;
  background-color: #FF1BAD;
  transition: transform 0.3s;
  transform: scaleX(0);
}

.field.has-label .field-label {
  font-size: 12px;
  transform: translateY(0);
}

.field.is-focused:after {
  transform: scaleX(1);
}

.field.is-focused .field-label {
  font-size: 12px;
  color: #FF1BAD;
  transform: translateY(0);
}

.field-label {
  position: relative;
  display: block;
  margin: 0 0 0 0;
  font-size: 16px;
  font-weight: 400;
  color: #545454;
  line-height: 16px;
  transition: transform 0.3s, font-size 0.3s;
  transform: translateY(34px);
}

.field-input {
  position: relative;
  display: block;
  height: 32px;
  width: 100%;
  padding: 8px 0 8px 0;
  background-color: transparent;
  font-size: 16px;
  line-height: 16px;
  border: none;
  outline: none;
  -webkit-appearance: none;
}

footer {
  position: fixed;
  bottom: 0;
  left: 0;
  height: 50px;
  width: 100%;
  background-color: #1E1E1E;
  line-height: 50px;
  text-align: center;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
